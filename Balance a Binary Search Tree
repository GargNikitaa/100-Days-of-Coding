class Solution {
    void inorderTraversal(TreeNode* root, vector<int>&inorder){
        if(root==NULL)
            return;
        inorderTraversal(root->left, inorder);
        inorder.push_back(root->val);
        inorderTraversal(root->right, inorder);
    }
    
    TreeNode* createTree(vector<int>&inorder, int s, int e){
        if(s>e)
            return NULL;
        int mid = s+(e-s)/2;
        TreeNode* root = new TreeNode(inorder[mid]);
        root->left = createTree(inorder, s, mid-1);
        root->right = createTree(inorder, mid+1, e);
        return root;
    }
public:
    TreeNode* balanceBST(TreeNode* root) {
    vector<int> inorder;
    inorderTraversal(root, inorder);  
    int s=0, e=inorder.size()-1;
    return createTree(inorder, s, e);
    }
};
