//{ Driver Code Starts
//

#include<bits/stdc++.h>
using namespace std;

struct Node
{
	int data;
	struct Node *left;
	struct Node *right;
	
	Node(int x){
	    data = x;
	    left = NULL;
	    right = NULL;
	}
};


void printPostOrder(Node *root)
{
	if(root==NULL)
		return;
	printPostOrder(root->left);
	printPostOrder(root->right);
	cout<<root->data<<" ";
}

// } Driver Code Ends


/*Complete the code here.
Node is as follows:
struct Node
{
  int data;
  Node* left;
  Node* right;
};
*/
class Solution{
    void createMap(int in[], map<int, int>&nodeToIndex, int n){
        for(int i=0; i<n; i++){
            nodeToIndex[in[i]]=i;
        }
    }
    Node* solve(int pre[], int in[], int startIndex, int endIndex, int &index, int size, map<int, int>&nodeToIndex){
        if((index>=size) || (startIndex>endIndex))
            return NULL;
        
        int element = pre[index++];
        int pos = nodeToIndex[element];
        Node* root = new Node(element);
        
        if (startIndex == endIndex) 
            return root; 
            
        root->left = solve(pre, in, startIndex, pos-1, index, size, nodeToIndex);
        root->right = solve(pre, in, pos+1, endIndex, index, size, nodeToIndex);
        
        return root;
    }
    public:
    Node* buildTree(int in[],int pre[], int n){
        int preIndex = 0;
        map<int, int>nodeToIndex;
        createMap(in, nodeToIndex, n);
        Node* ans = solve(pre, in, 0, n-1, preIndex, n, nodeToIndex);
        return ans;
    }
};

//{ Driver Code Starts.
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		
		int inorder[n], preorder[n];
		for(int i=0; i<n; i++)
			cin>> inorder[i];
		for(int i=0; i<n; i++)
			cin>> preorder[i];
		Solution obj;
		Node *root = obj.buildTree(inorder, preorder, n);
		printPostOrder(root);
		cout<< endl;
	}
}

// } Driver Code Ends
