#include <iostream>
using namespace std;
class Node{
    public:
    int data;
    Node*next;
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
};
class Stack{
    public:
    int size;
    int cnt;
    Node*top;
    Node*head;
    Stack(int size){
        this->size=size;
        cnt=0;
        top=NULL;
        head=NULL;
    }
    
    void push(int data){
        if(cnt==0){
            Node*temp=new Node(data);
            top=temp;
            head=temp;
            cnt++;
        }
        else if(cnt<size){
            Node*temp=new Node(data);
            top->next=temp;
            top=top->next;
            cnt++;
        }
        else
            cout<<"STACK IS FULL"<<endl;
    }
    
    int pop(){
        int ans;
        if(top==NULL)
            return -1;
        else if(head->next==NULL){
            ans=top->data;
            top=NULL;
            return ans;
        }
        else{
            Node*temp=head;
            int count=1;
            while(count<cnt-1){
                temp=temp->next;
                count++;
            }
            ans=temp->next->data;
            temp->next=NULL;
            top=temp;
            return ans;
        }
    }
    
    bool empty(){
        if(top==NULL)
            return true;
        return false;
    }
    
    int peek(){
        if(top==NULL)
            return -1;
        return top->data;
    }
};


int main() {
    Stack s(5);
    s.push(5);
    cout<<"TOP: "<<s.peek()<<endl;
    s.push(10);
    cout<<"TOP: "<<s.peek()<<endl;
    cout<<"Removed element: "<<s.pop()<<endl;
    if(s.empty())
        cout<<"Stack is empty"<<endl;
    else
        cout<<"Stack is not empty"<<endl;
    cout<<"Removed element: "<<s.pop()<<endl;
    if(s.empty())
        cout<<"Stack is empty"<<endl;
    else
        cout<<"Stack is not empty"<<endl;
    return 0;
}
