//{ Driver Code Starts
/* program to construct tree using inorder and postorder traversals */
#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct Node {
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x) {
        data = x;
        left = right = NULL;
    }
};

/* This funtcion is here just to test buildTreeUtil() */
void preOrder(Node* node) {
    if (node == NULL) return;

    /* then print the data of node */
    printf("%d ", node->data);

    /* first recur on left child */
    preOrder(node->left);

    /* now recur on right child */
    preOrder(node->right);
}

Node* buildTree(int in[], int post[], int n);

int main() {
    int t, n;
    cin >> t;
    while (t--) {
        cin >> n;
        int in[n], post[n];
        for (int i = 0; i < n; i++) cin >> in[i];
        for (int i = 0; i < n; i++) cin >> post[i];
        Node* root = buildTree(in, post, n);
        preOrder(root);
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends

void createMap(int in[], map<int, int>&nodeToIndex, int n){
    for(int i=0; i<n; i++){
            nodeToIndex[in[i]]=i;
    }
}
Node* solve(int post[], int in[], int startIndex, int endIndex, int &index, int size, map<int, int>&nodeToIndex){
    if((index<0) || (startIndex>endIndex))
        return NULL;

    int element = post[index--];
    int pos = nodeToIndex[element];
    Node* root = new Node(element);

    if (startIndex == endIndex) 
        return root; 

    root->right = solve(post, in, pos+1, endIndex, index, size, nodeToIndex);
    root->left = solve(post, in, startIndex, pos-1, index, size, nodeToIndex);
    

    return root;
}
Node *buildTree(int in[], int post[], int n) {
    int postIndex = n-1;
    map<int, int>nodeToIndex;
    createMap(in, nodeToIndex, n);
    Node* ans = solve(post, in, 0, n-1, postIndex, n, nodeToIndex);
    return ans;    
}
